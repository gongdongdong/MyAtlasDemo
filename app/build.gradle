group = 'com.soooo.testsocket.atlasdemo'
version = getEnvValue("versionName", "1.0.0");
def apVersion = getEnvValue("apVersion", "");

apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'


//通过增加判断逻辑，打出不同类型的定制包
def appId = "com.soooo.testsocket"
def minVersion = 14
if (project.hasProperty("beta")) {
    appId = "com.soooo.testsocket.beta"
    minVersion = 21
}

repositories {
    mavenLocal()
    jcenter()
}

android {
    compileSdkVersion 23
    buildToolsVersion '26.0.2'
    defaultConfig {
        applicationId appId
        minSdkVersion minVersion
        targetSdkVersion 22
        versionCode 1
        versionName version
        vectorDrawables.useSupportLibrary = true
        //通过增加判断逻辑，打出不同类型的定制包
        if (project.hasProperty("beta")) {
            buildConfigField "boolean", "API_ENV", "false"
        }else{
            buildConfigField "boolean", "API_ENV", "false"
        }
        multiDexEnabled = true

    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            ndk {
                abiFilters "x86","armeabi"
            }

        }
    }

}


atlas {
    instantAppEnabled true //todo gdd not know
    atlasEnabled true
    tBuildConfig {
//        preLaunch = 'com.taobao.demo.DemoPreLaunch'   //todo gdd know
        classInject false
        aaptConstantId true
//        dataBindingBundles = ['com.taobao.databindbundle']  //todo gdd know
        allBundlesToMdex true
        outOfApkBundles = ['secondbundle']//
    }



    patchConfigs {
        debug {
            createTPatch false
        }
    }


    buildTypes {
        debug {
            if (apVersion) {
                baseApDependency "com.soooo.testsocket.atlasdemo:AP-debug:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}



dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    //atlas的依赖7.6.0.31-2
    compile('com.taobao.android:atlas_core:5.1.0.9@aar') {
        transitive = true
    }
    compile 'com.taobao.android:atlasupdate:1.1.4.23@aar'//1.1.4.7

    //设置bundle依赖
    bundleCompile project(':firstbundle')
    bundleCompile project(':secondbundle')

    compile 'com.android.support:appcompat-v7:23.4.0'

    compile 'com.android.support.constraint:constraint-layout:1.1.3'
    compile 'com.android.support:design:23.4.0'
    compile 'com.android.support:multidex:1.0.3'
}



String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
    if (task.name.contains("assemble")) {
        def files = null;
        def file = new File(task.project.getBuildDir(), "outputs");
        if (file.exists() && new File(file, "tpatch-debug").exists()) {
            files = new File(file, "tpatch-debug").listFiles();
        }
        if (files != null) {
            for (File file1 : files) {
                if (file1.getName().endsWith(".json") || file1.getName().endsWith(".tpatch")) {

                    if (!new File(task.project.getRootDir(), "hisTpatch").exists()) {
                        new File(task.project.getRootDir(), "hisTpatch").mkdirs();
                    }
                    org.apache.commons.io.FileUtils.copyFileToDirectory(file1, new File(task.project.getRootDir(), "hisTpatch"));
                }
            }
        }
    }
}

apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/apk/debug/${project.name}-debug.ap"
            artifactId "AP-debug"
        }
    }
}

